/* soapOuterRCAVMvouServiceSoap12Proxy.cpp
   Generated by gSOAP 2.8.66 for move.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapOuterRCAVMvouServiceSoap12Proxy.h"

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy() : soap(SOAP_IO_DEFAULT)
{	OuterRCAVMvouServiceSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy(const OuterRCAVMvouServiceSoap12Proxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy(const struct soap &_soap) : soap(_soap)
{ }

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	OuterRCAVMvouServiceSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy(soap_mode iomode) : soap(iomode)
{	OuterRCAVMvouServiceSoap12Proxy_init(iomode, iomode);
}

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	OuterRCAVMvouServiceSoap12Proxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	OuterRCAVMvouServiceSoap12Proxy_init(imode, omode);
}

OuterRCAVMvouServiceSoap12Proxy::~OuterRCAVMvouServiceSoap12Proxy()
{
	this->destroy();
	}

void OuterRCAVMvouServiceSoap12Proxy::OuterRCAVMvouServiceSoap12Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"VCWeb", "http://tempuri.org/OuterRCAVMvinServiceSoap", NULL, NULL},
        {"VCWeb2", "http://tempuri.org/OuterRCAVMvinServiceSoap12", NULL, NULL},
        {"VCWeb3", "http://tempuri.org/OuterRCAVMvouServiceSoap", NULL, NULL},
        {"VC1", "http://tempuri.org/", NULL, NULL},
        {"VCWeb4", "http://tempuri.org/OuterRCAVMvouServiceSoap12", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

OuterRCAVMvouServiceSoap12Proxy *OuterRCAVMvouServiceSoap12Proxy::copy()
{	OuterRCAVMvouServiceSoap12Proxy *dup = SOAP_NEW_UNMANAGED(OuterRCAVMvouServiceSoap12Proxy(*(struct soap*)this));
	return dup;
}

OuterRCAVMvouServiceSoap12Proxy& OuterRCAVMvouServiceSoap12Proxy::operator=(const OuterRCAVMvouServiceSoap12Proxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void OuterRCAVMvouServiceSoap12Proxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void OuterRCAVMvouServiceSoap12Proxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	OuterRCAVMvouServiceSoap12Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void OuterRCAVMvouServiceSoap12Proxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *OuterRCAVMvouServiceSoap12Proxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *OuterRCAVMvouServiceSoap12Proxy::soap_fault()
{	return this->fault;
}

const char *OuterRCAVMvouServiceSoap12Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *OuterRCAVMvouServiceSoap12Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int OuterRCAVMvouServiceSoap12Proxy::soap_close_socket()
{	return soap_closesock(this);
}

int OuterRCAVMvouServiceSoap12Proxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void OuterRCAVMvouServiceSoap12Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void OuterRCAVMvouServiceSoap12Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *OuterRCAVMvouServiceSoap12Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int OuterRCAVMvouServiceSoap12Proxy::DoOuterRCAVMvou(const char *endpoint, const char *soap_action, _VC1__DoOuterRCAVMvou *VC1__DoOuterRCAVMvou, _VC1__DoOuterRCAVMvouResponse &VC1__DoOuterRCAVMvouResponse)
{	struct soap *soap = this;
	struct __VCWeb4__DoOuterRCAVMvou soap_tmp___VCWeb4__DoOuterRCAVMvou;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://tncmes07/COG/ChipMOS/WebService/OuterRCAVMvouService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DoOuterRCAVMvou";
	soap_tmp___VCWeb4__DoOuterRCAVMvou.VC1__DoOuterRCAVMvou = VC1__DoOuterRCAVMvou;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___VCWeb4__DoOuterRCAVMvou(soap, &soap_tmp___VCWeb4__DoOuterRCAVMvou);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___VCWeb4__DoOuterRCAVMvou(soap, &soap_tmp___VCWeb4__DoOuterRCAVMvou, "-VCWeb4:DoOuterRCAVMvou", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___VCWeb4__DoOuterRCAVMvou(soap, &soap_tmp___VCWeb4__DoOuterRCAVMvou, "-VCWeb4:DoOuterRCAVMvou", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_VC1__DoOuterRCAVMvouResponse*>(&VC1__DoOuterRCAVMvouResponse)) // NULL ref?
		return soap_closesock(soap);
	VC1__DoOuterRCAVMvouResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	VC1__DoOuterRCAVMvouResponse.soap_get(soap, "VC1:DoOuterRCAVMvouResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
