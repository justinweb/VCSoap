/* soapOuterRCAVMvinServiceSoapProxy.cpp
   Generated by gSOAP 2.8.66 for move.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapOuterRCAVMvinServiceSoapProxy.h"

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	OuterRCAVMvinServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy(const OuterRCAVMvinServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	OuterRCAVMvinServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	OuterRCAVMvinServiceSoapProxy_init(iomode, iomode);
}

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	OuterRCAVMvinServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	OuterRCAVMvinServiceSoapProxy_init(imode, omode);
}

OuterRCAVMvinServiceSoapProxy::~OuterRCAVMvinServiceSoapProxy()
{
	this->destroy();
	}

void OuterRCAVMvinServiceSoapProxy::OuterRCAVMvinServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"VCWeb", "http://tempuri.org/OuterRCAVMvinServiceSoap", NULL, NULL},
        {"VCWeb2", "http://tempuri.org/OuterRCAVMvinServiceSoap12", NULL, NULL},
        {"VCWeb3", "http://tempuri.org/OuterRCAVMvouServiceSoap", NULL, NULL},
        {"VC1", "http://tempuri.org/", NULL, NULL},
        {"VCWeb4", "http://tempuri.org/OuterRCAVMvouServiceSoap12", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

OuterRCAVMvinServiceSoapProxy *OuterRCAVMvinServiceSoapProxy::copy()
{	OuterRCAVMvinServiceSoapProxy *dup = SOAP_NEW_UNMANAGED(OuterRCAVMvinServiceSoapProxy(*(struct soap*)this));
	return dup;
}

OuterRCAVMvinServiceSoapProxy& OuterRCAVMvinServiceSoapProxy::operator=(const OuterRCAVMvinServiceSoapProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void OuterRCAVMvinServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void OuterRCAVMvinServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	OuterRCAVMvinServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void OuterRCAVMvinServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *OuterRCAVMvinServiceSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *OuterRCAVMvinServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *OuterRCAVMvinServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *OuterRCAVMvinServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int OuterRCAVMvinServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int OuterRCAVMvinServiceSoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void OuterRCAVMvinServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void OuterRCAVMvinServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *OuterRCAVMvinServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int OuterRCAVMvinServiceSoapProxy::DoOuterRCAVMvin(const char *endpoint, const char *soap_action, _VC1__DoOuterRCAVMvin *VC1__DoOuterRCAVMvin, _VC1__DoOuterRCAVMvinResponse &VC1__DoOuterRCAVMvinResponse)
{	struct soap *soap = this;
	struct __VCWeb__DoOuterRCAVMvin soap_tmp___VCWeb__DoOuterRCAVMvin;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://tncmes07/COG/ChipMOS/WebService/OuterRCAVMvinService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DoOuterRCAVMvin";
	soap_tmp___VCWeb__DoOuterRCAVMvin.VC1__DoOuterRCAVMvin = VC1__DoOuterRCAVMvin;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___VCWeb__DoOuterRCAVMvin(soap, &soap_tmp___VCWeb__DoOuterRCAVMvin);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___VCWeb__DoOuterRCAVMvin(soap, &soap_tmp___VCWeb__DoOuterRCAVMvin, "-VCWeb:DoOuterRCAVMvin", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___VCWeb__DoOuterRCAVMvin(soap, &soap_tmp___VCWeb__DoOuterRCAVMvin, "-VCWeb:DoOuterRCAVMvin", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_VC1__DoOuterRCAVMvinResponse*>(&VC1__DoOuterRCAVMvinResponse)) // NULL ref?
		return soap_closesock(soap);
	VC1__DoOuterRCAVMvinResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	VC1__DoOuterRCAVMvinResponse.soap_get(soap, "VC1:DoOuterRCAVMvinResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
