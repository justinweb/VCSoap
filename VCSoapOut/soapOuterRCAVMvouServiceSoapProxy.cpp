/* soapOuterRCAVMvouServiceSoapProxy.cpp
   Generated by gSOAP 2.8.66 for moveout.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapOuterRCAVMvouServiceSoapProxy.h"

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy() : soap(SOAP_IO_DEFAULT)
{	OuterRCAVMvouServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy(const OuterRCAVMvouServiceSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	OuterRCAVMvouServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy(soap_mode iomode) : soap(iomode)
{	OuterRCAVMvouServiceSoapProxy_init(iomode, iomode);
}

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	OuterRCAVMvouServiceSoapProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	OuterRCAVMvouServiceSoapProxy_init(imode, omode);
}

OuterRCAVMvouServiceSoapProxy::~OuterRCAVMvouServiceSoapProxy()
{
	this->destroy();
	}

void OuterRCAVMvouServiceSoapProxy::OuterRCAVMvouServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://tempuri.org/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

OuterRCAVMvouServiceSoapProxy *OuterRCAVMvouServiceSoapProxy::copy()
{	OuterRCAVMvouServiceSoapProxy *dup = SOAP_NEW_UNMANAGED(OuterRCAVMvouServiceSoapProxy(*(struct soap*)this));
	return dup;
}

OuterRCAVMvouServiceSoapProxy& OuterRCAVMvouServiceSoapProxy::operator=(const OuterRCAVMvouServiceSoapProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void OuterRCAVMvouServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void OuterRCAVMvouServiceSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	OuterRCAVMvouServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void OuterRCAVMvouServiceSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *OuterRCAVMvouServiceSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *OuterRCAVMvouServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *OuterRCAVMvouServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *OuterRCAVMvouServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int OuterRCAVMvouServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int OuterRCAVMvouServiceSoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void OuterRCAVMvouServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void OuterRCAVMvouServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *OuterRCAVMvouServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int OuterRCAVMvouServiceSoapProxy::DoOuterRCAVMvou(const char *endpoint, const char *soap_action, _ns1__DoOuterRCAVMvou *ns1__DoOuterRCAVMvou, _ns1__DoOuterRCAVMvouResponse &ns1__DoOuterRCAVMvouResponse)
{	struct soap *soap = this;
	struct __ns1__DoOuterRCAVMvou soap_tmp___ns1__DoOuterRCAVMvou;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://tncmes07/COG/ChipMOS/WebService/OuterRCAVMvouService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DoOuterRCAVMvou";
	soap_tmp___ns1__DoOuterRCAVMvou.ns1__DoOuterRCAVMvou = ns1__DoOuterRCAVMvou;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__DoOuterRCAVMvou(soap, &soap_tmp___ns1__DoOuterRCAVMvou);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DoOuterRCAVMvou(soap, &soap_tmp___ns1__DoOuterRCAVMvou, "-ns1:DoOuterRCAVMvou", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DoOuterRCAVMvou(soap, &soap_tmp___ns1__DoOuterRCAVMvou, "-ns1:DoOuterRCAVMvou", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DoOuterRCAVMvouResponse*>(&ns1__DoOuterRCAVMvouResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DoOuterRCAVMvouResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DoOuterRCAVMvouResponse.soap_get(soap, "ns1:DoOuterRCAVMvouResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int OuterRCAVMvouServiceSoapProxy::DoOuterRCAVMvou_(const char *endpoint, const char *soap_action, _ns1__DoOuterRCAVMvou *ns1__DoOuterRCAVMvou, _ns1__DoOuterRCAVMvouResponse &ns1__DoOuterRCAVMvouResponse)
{	struct soap *soap = this;
	struct __ns1__DoOuterRCAVMvou_ soap_tmp___ns1__DoOuterRCAVMvou_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://tncmes07/COG/ChipMOS/WebService/OuterRCAVMvouService.asmx";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/DoOuterRCAVMvou";
	soap_tmp___ns1__DoOuterRCAVMvou_.ns1__DoOuterRCAVMvou = ns1__DoOuterRCAVMvou;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__DoOuterRCAVMvou_(soap, &soap_tmp___ns1__DoOuterRCAVMvou_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DoOuterRCAVMvou_(soap, &soap_tmp___ns1__DoOuterRCAVMvou_, "-ns1:DoOuterRCAVMvou", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DoOuterRCAVMvou_(soap, &soap_tmp___ns1__DoOuterRCAVMvou_, "-ns1:DoOuterRCAVMvou", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DoOuterRCAVMvouResponse*>(&ns1__DoOuterRCAVMvouResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DoOuterRCAVMvouResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DoOuterRCAVMvouResponse.soap_get(soap, "ns1:DoOuterRCAVMvouResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
